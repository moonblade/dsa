/*
	Ex No. 14
	Infix to postfix and hence evaluate it
	S4R 036 Mohamed Insaf K
	09/03/2015
*/

//FIrst implement stack

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct node{
	int val;
	struct node *next;
};

int push(int val, struct node **top)
{
	struct node *temp;
	temp = (struct node *)malloc(sizeof(struct node));
	if( temp != NULL)
	{
		temp->val = val;
		temp->next = *top;
		*top = temp;
		return 1;
	}
	return 0;
}

int pop(struct node **top)
{
	int val;
	struct node *temp;
	if( *top != NULL)
	{
		val = (*top)->val;
		temp = *top;
		*top = (*top)->next;
		free(temp);
		return val;
	}
	else
		return -1;
}

void display(struct node *top)
{
	struct node *temp;
	for(temp = top; temp != NULL; temp = temp->next )
		printf("%c", temp->val);
	printf("\n");
}

int priority(char s)
{
	if( s=='(' )
		return 1;
	else if( s=='+' || s=='-')
		return 5;
	else if( s=='*' || s=='/')
		return 6;
	else if( s==')' )
		return 10;
	else
		return 0;
}

int main(void)
{
	char ch, postfix[MAX];
	char *t = postfix;
	int val, choice;
	static struct node *stack1 = NULL;
	while( (ch = getchar()) != '\n')
	{
		if( ch >= '0' && ch <='9' )
			*(t++) = ch;
		else if( ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='(' || ch==')' || ch=='^' )
		{
			if(stack1 == NULL || priority(stack1->val) < priority(ch))
			{
				push(ch, &stack1);
			}
			else
			{
				*(t++) = pop(&stack1);
				push(ch, &stack1);
			}
		}
	}
	while(stack1!=NULL)
	{
		*(t++) = pop(&stack1);
	}
	*t = '\0';
	printf("\nPostfix\t%s\n", postfix);
}

